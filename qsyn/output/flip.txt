Do Gate Operations Normalization
Reducde to 6->6
MAX MODULE NUM is : 5
bool []
phasing [cirq.CZ]
sp [cirq.H]
entangle []
[cirq.CZ, cirq.H]
{}
dict_keys([])
{}
Rule Selection Rotuine
C_RULE_ID ['triple_span', 'span', 'open_and_close_B', 'open_and_close_P', 'open_and_close_NC']
P_RULE_ID ['span', 'open_and_close_B']
NC_RULE_ID ['add']
prior module generating
module_gate_num is 3
prior module gen at level 1 done
prior module gen at level 2 done
prior module gen at level 3 done
prior module gen done
Modular Search state search!
concrete_criterion : False
naive_module_gen : True
**Initial State is**
EMPTY STATE
********************
Initdiffers
[('Bool', {1, 2})]
===================
curr state

EMPTY STATE
curr_targ_differ ('Bool', {1, 2})
check_order : stacked, targ_diff [] ('Bool', {1, 2})
cost (0, 0, 0, 0)
Choose Best Count Attribute!
{'|000⟩': 'IDENTICAL', '|001⟩': 'IDENTICAL', '|010⟩': 'IDENTICAL', '|011⟩': 'IDENTICAL', '|100⟩': ('Bool', {1, 2}), '|101⟩': ('Bool', {1, 2}), '|110⟩': ('Bool', {1, 2}), '|111⟩': ('Bool', {1, 2})}
['Bool']
GEN for ('Bool', {1, 2})
GEN DONE 6
** cnt_num_of_passed_module after seeing all modules in pool ** 6
===================
curr state

Moment #0 
	-[ H(0)]
Moment #1 
	-[ CZ(0, 1)]
Moment #2 
	-[ H(0)]

curr_targ_differ ('Bool', {0, 1, 2})
check_order : stacked, targ_diff [('Bool', {1, 2})] ('Bool', {0, 1, 2})
cost (1, 3, 0, 0)
Choose Best Count Attribute!
{'|000⟩': 'IDENTICAL', '|001⟩': 'IDENTICAL', '|010⟩': ('Bool', {0}), '|011⟩': ('Bool', {0}), '|100⟩': ('Bool', {1, 2}), '|101⟩': ('Bool', {1, 2}), '|110⟩': ('Bool', {0, 1, 2}), '|111⟩': ('Bool', {0, 1, 2})}
['Bool']
GEN for ('Bool', {0, 1, 2})
GEN DONE 6
** cnt_num_of_passed_module after seeing all modules in pool ** 6
===================
curr state

Moment #0 
	-[ H(0)]
Moment #1 
	-[ CZ(0, 2)]
Moment #2 
	-[ H(0)]

curr_targ_differ ('Bool', {0, 1, 2})
check_order : stacked, targ_diff [('Bool', {1, 2})] ('Bool', {0, 1, 2})
cost (1, 3, 0, 0)
Choose Best Count Attribute!
{'|000⟩': 'IDENTICAL', '|001⟩': ('Bool', {0}), '|010⟩': 'IDENTICAL', '|011⟩': ('Bool', {0}), '|100⟩': ('Bool', {1, 2}), '|101⟩': ('Bool', {0, 1, 2}), '|110⟩': ('Bool', {1, 2}), '|111⟩': ('Bool', {0, 1, 2})}
['Bool']
GEN for ('Bool', {0, 1, 2})
GEN DONE 6
** cnt_num_of_passed_module after seeing all modules in pool ** 6
===================
curr state

Moment #0 
	-[ H(1)]
Moment #1 
	-[ CZ(0, 1)]
Moment #2 
	-[ H(1)]

curr_targ_differ ('Bool', {2})
check_order : stacked, targ_diff [('Bool', {1, 2})] ('Bool', {2})
cost (1, 3, 0, 0)
Choose Best Count Attribute!
{'|000⟩': 'IDENTICAL', '|001⟩': 'IDENTICAL', '|010⟩': 'IDENTICAL', '|011⟩': 'IDENTICAL', '|100⟩': ('Bool', {2}), '|101⟩': ('Bool', {2}), '|110⟩': ('Bool', {2}), '|111⟩': ('Bool', {2})}
['Bool']
GEN for ('Bool', {2})
GEN DONE 4
MODULES were  [('Bool', {1, 2}), ('Bool', {2})]
================================
Synthesis Result
Benchmark : flip
Mode : Ours
================================
Synthesized QC
              ┌──┐
0: ───────@─────@────────
          │     │
1: ───H───@────H┼────────
                │
2: ───H─────────@────H───
              └──┘
Stacked Moduels
[('Bool', {1, 2}), ('Bool', {2})]
Elapsed Time :  1.4
